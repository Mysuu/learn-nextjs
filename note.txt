- là react framework
- pre-rendering: trước thời điểm trình chiếu
 là quá trình chuyển đổi từ component sang html trước thời điểm 
 nó tiếp cận đến trình duyệt

- có 2 loại pre-rendering
1. SSR(serverside rendering)
- chuyển hoá từ react component -> html
thực hiện ở phía sever
- chỉ tạo ra html khi trình duyệt gửi request

2. SSG(static site genertor)
- chuyển hoá từ react component -> html
nhưng diễn ra mà k cần trình duyệt gửi request
- file html được tạo sẵn, chỉ chờ trình duyệt lấy ra

** fallback:
-false: trả về page not found
-true: tạo ra 1 file json mới, chuyển trang sẽ biến mất
-blocking: tạo ra 1 file json mới, chuyển trang vẫn giữ(đc lưu vào server)

** NextJS: 02-03 Navigation between Pages
Client side routing: gọi 1 lần file duy nhất,
không làm full page reload,
get thêm 1 file js về chạy file js đó để chuyển đổi
qua trang mong muốn
Để <Link><a>... thì a href đến 1 trang nào đó, cái đó
sẽ tốt cho SEO
- scroll: true: cho phép bấm vào trở về đầu trang
- replace: chuyển trang mới k back về trang cũ đc
- prefetch: refesh trước thông tin của trang sẽ đi tới
  + nó sẽ prefetch sẵn các file có trong phạm vi viewport
  (màn hình hiển thị ban đầu những gì thấy được)
  + có nghĩa là chuẩn bị sẵn file mà Link sẽ dẫn đến
  + nếu mạng chậm sẽ không prefetch trước
  + chỉ được bật ở mode production(npm run build -> npm start)
  + ban đầu prefetch chỉ tải trước về, khi bấm vào thì mới chuyển
  trang, nếu không muốn prefetch thông tin thì để là false,
  không để gì auto true

useRouter dúng như useNavigate

**NextJS: 02-04 SSG, SSR, CSR and ISR
- hydrate() trong react giống render(), nhưng sử dụng cho
việc thêm những eventlisteners vào nhưng file html
đã đc render sẵn phía sever
- Pre-rendering: render(chuẩn bị) sẵn file html ở phía sever,
khi user get về thì có sẵn show lên rồi load thêm file js
  + SSR - Server Side Rendering: mỗi lần gửi request mới trả về
  1 file html
  + SSG - Static Site Generation: build ra tất, gọi gì thì lấy ra
- No Pre-rendering: lần render đầu tiên là file html rỗng <div>
root, sau đó load js lên mới render DOM lên
- CSR - Client Side Rendering: k render phía server, chờ client load 
file js xong mới render lên giao diện
- ISR - Incremental Static Regeneration: build trc những sản phẩm
phổ biến dưới dạng SSG, ai query lên lấy về luôn, còn gọi file
chưa có thì mới tạo cái mới

- Mỗi trang trong NextJS có thể config 1 dạng pre-rendering khác
nhau

**NextJS: 02-05 Automatic Static Optimization
- nếu sử dụng 2 hàm getInitialProps và getServerSideProps thì
sẽ không phải là Automatic Static Optimization, render theo từng
request, k pre-render trước đó đc
- mỗi lần request lên trang cần đến,nó phải tải file js về
 để thực thi chứ k chuẩn bị sẵn html nữa
- getServerSideProps là server side rendering nên nó sẽ chạy 
lên phía server thực hiện redirect ra file html xong mới trả
về phía client, trả về đầy đủ thông tin của query luôn nên chỉ
render 1 lần
- nếu k sử dụng thì trang đó pre-render được nên sẽ bật mode 
Automatic Static Optimization, build ra file html render ra
client luôn và nó sẽ render 2 lần nếu obj có thay đổi

**NextJS: 02-06 SSG getStaticProps with typescript
- dùng khi sử dụng SSG
- build ra những file html sẵn, khi deploy lên server đã có sẵn
những file html đó rồi, user request nó chỉ việc trả về, k cần
sử lý gì nữa cả
1. Static HTML Generation:chỉ có html, k có json data
2. Static HTML + JSON Data: getStaticProps
3. Static HTML + JSON Data + Dynamic Routes: getInitialProps, getStaticPaths
- Lưu ý: dùng getInitialProps, getStaticPaths không dùng với getServerSideProps
        và ngược lại
- data được lấy về bên server sẽ được truyền lên qua
thẻ script chứa id là '__NEXT_DATA__', và bind ngược lại lên
client

**NextJS: 02-07 SSG getStaticPaths with typescript
- getStaticPaths sau đó gọi từng getStaticProps rồi tạo ra từng file html
trong next -> server -> pages

**NextJS: 02-08 SSG and Data Fetching on client side